<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Finance on dosh blog</title>
    <link>http://localhost:1313/tags/finance/</link>
    <description>Recent content in Finance on dosh blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 30 Jul 2024 00:00:01 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/finance/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mean Variance Optimization</title>
      <link>http://localhost:1313/posts/2024_07_30_mean_variance_optimization/</link>
      <pubDate>Tue, 30 Jul 2024 00:00:01 +0900</pubDate>
      <guid>http://localhost:1313/posts/2024_07_30_mean_variance_optimization/</guid>
      <description>Print DataFrame without omitting with pl.Config(tbl_rows=1, tbl_cols=100): print(df1) print(df2) with pl.Config(tbl_rows=1, tbl_cols=100): print(df) Copy df = df.unique(subset=[&amp;#34;datetime&amp;#34;]) Copy polars
minimize risk(variance) by given return import numpy as np import yfinance as yf import scipy.optimize as sco # Fetch historical data tickers = [&amp;#39;AAPL&amp;#39;, &amp;#39;MSFT&amp;#39;]# , &amp;#39;GOOGL&amp;#39;, &amp;#39;AMZN&amp;#39;] data = yf.download(tickers, start=&amp;#39;2020-01-01&amp;#39;, end=&amp;#39;2021-01-01&amp;#39;)[&amp;#39;Adj Close&amp;#39;] # Calculate daily returns returns = data.pct_change().dropna() # Define the objectives def portfolio_return(weights, returns): return np.sum(weights * returns.</description>
    </item>
    <item>
      <title>Mplfinance tips</title>
      <link>http://localhost:1313/posts/2024_02_01_mpf/</link>
      <pubDate>Thu, 01 Feb 2024 00:00:48 +0900</pubDate>
      <guid>http://localhost:1313/posts/2024_02_01_mpf/</guid>
      <description>Plotting Financial Data with Market Color Overrides import polars as pl import mplfinance as mpf df = pl.read_csv(&amp;#34;df.csv&amp;#34;, try_parse_dates=True) df = df.to_pandas() df = df.set_index(&amp;#34;datetime&amp;#34;) # Plot the data without market color overrides mpf.plot(df,volume=False,type=&amp;#39;candle&amp;#39;,style=&amp;#39;yahoo&amp;#39;,figscale=1.4) # Initialize the MCOverrides column with the base market colors (black and white) mc = mpf.make_marketcolors(base_mpf_style=&amp;#39;classic&amp;#39;) # Get the target column target = df[&amp;#34;target&amp;#34;] # Initialize the column with all values set to `mc` df[&amp;#39;MCOverrides&amp;#39;] = [mc] * len(df) # Override the market colors based on the target value df.</description>
    </item>
    <item>
      <title>This is a image test for visual formatting</title>
      <link>http://localhost:1313/posts/2024_01_27_to_do/</link>
      <pubDate>Sat, 20 Jan 2024 00:00:48 +0900</pubDate>
      <guid>http://localhost:1313/posts/2024_01_27_to_do/</guid>
      <description>Bold the title of header I only blog about things that I may want to search for and review later. Bold the title of header Bold the title of header Bold the title of header Bold the title of header Bold the title of header Bold the title of header Bold the title of header Bold the title of header Bold the title of header Bold the title of header</description>
    </item>
    <item>
      <title>How I generate thumbnail image</title>
      <link>http://localhost:1313/posts/2024_01_14_how_i_image/</link>
      <pubDate>Fri, 12 Jan 2024 00:23:48 +0900</pubDate>
      <guid>http://localhost:1313/posts/2024_01_14_how_i_image/</guid>
      <description>hugginface stable diffusion https://huggingface.co/spaces/stabilityai/stable-diffusion my prompt is Sepia renaissance &amp;ldquo;title of the article&amp;rdquo; This cover image is also generated by AI. Prompt is polar bear sepia
my prompt is Sepia renaissance &amp;ldquo;title of the article&amp;rdquo; This cover image is also generated by AI. Prompt is polar bear sepia</description>
    </item>
  </channel>
</rss>
